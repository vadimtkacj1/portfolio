const projectsData = [
    {
        title: "Plate Detection with YOLOv8",
        description: "A computer vision project that detects and recognizes license plates using YOLOv8 object detection model and Tesseract OCR for text recognition.",
        tech: ["Python", "Scikit-learn", "pandas", "numpy", "tensorflow", "seaborn", "opencv-python", "keras"],
        github: "https://github.com/vadimtkacj1/car-plate-detection",
        demo: null,
        hasDemo: false,
    },
    {
        title: "Crypto News Sentiment App",
        description: "A minimal FastAPI web app for collecting RSS crypto news, running sentiment predictions with LLMs, and viewing database contents.",
        tech: ["Python", "fastapi", "jinja2", "uvicorn"],
        github: "https://github.com/vadimtkacj1/finder-crypto-news-assistant",
        demo: null,
        hasDemo: false,
    },
    {
        title: "Emotion Recognition CNN",
        description: "A deep learning project for facial emotion recognition using Convolutional Neural Networks (CNN) built with TensorFlow/Keras.",
        tech: ["Python", "Scikit-learn", "pandas", "numpy", "tensorflow", "seaborn"],
        github: "https://github.com/vadimtkacj1/face-emotional-recognition-cnn",
        demo: null,
        hasDemo: false,
    },
    {
        title: "Artifact Detection in Generated Images",
        description: "This project implements a binary classification system to detect artifacts in AI-generated images. The system identifies various artifacts including distorted text, unnatural hands and fingers, face mask remnants, tattoos, misaligned eyes, and other visual anomalies that might appear in generated images.",
        tech: ["Python", "matplotlib", "opencv-python", "tensorflow", "Scikit-learn"],
        github: "https://github.com/vadimtkacj1/binary-classification",
        demo: null,
        hasDemo: false,
    },
    {
        title: "TuTube - YouTube Analyzer",
        description: "TuTube is a desktop application that allows you to analyze YouTube videos by downloading their audio, transcribing the content, and generating AI-powered analysis using ChatGPT. The application features a modern, dark-themed UI built with PyQt5 and provides an intuitive way to process YouTube content.",
        tech: ["Python", "openai", "PyQt5"],
        github: "https://github.com/vadimtkacj1/tutube-ai-assistante",
        demo: null,
        hasDemo: false,
    },
    {
        title: "Student Performance Prediction System",
        description: "A machine learning web application that predicts student math scores based on various demographic and academic factors using Flask and scikit-learn.",
        tech: ["Python", "Scikit-learn", "numpy", "pandas", "xgboost", "flask", "seaborn"],
        github: "https://github.com/vadimtkacj1/math-score-prediction",
        demo: null,
        hasDemo: false,
    },
        {
        title: "Hotel Reservation Prediction - MLOps Pipeline",
        description: "An end-to-end machine learning operations (MLOps) pipeline to predict whether hotel customers will honor or cancel their reservations. This project demonstrates production-ready ML deployment with comprehensive experiment tracking, automated CI/CD, and scalable cloud infrastructure.",
        tech: ["Python", "Scikit-learn", "numpy", "pandas", "xgboost", "flask", "seaborn", "google-cloud-storage", "imbalanced-learn"],
        github: "https://github.com/vadimtkacj1/hotel_prediction",
        demo: null,
        hasDemo: false,
    },
    {
        title: "AI assistant",
        description: "A modern AI assistant featuring voice control, code generation. Built with Python and PyQt6, providing a seamless and intuitive interface for AI-powered tasks.",
        tech: ["Python", "fastapi", "matplotlib", "seaborn", "SpeechRecognition", "pillow", "opencv-python", "pygame"],
        github: "https://github.com/vadimtkacj1/ai-assistant",
        demo: null,
        hasDemo: false,
    },
    {
        title: "Real Estate Price Assistant",
        description: "A hybrid machine learning and large language model (LLM) system for real estate price prediction from natural language queries. The assistant uses an XGBoost regression model, and Google's Gemini 2.5 Flash API for natural language parsing and explanation generation, wrapped in a Gradio-based UI.",
        tech: ["Python", "Scikit-learn", "pandas", "numpy", "google-genai"],
        github: "https://github.com/vadimtkacj1/real-estate-appraisal-agent",
        demo: null,
        hasDemo: false,
    },
    {
        title: "MindEasy - AI Therapy Chatbot",
        description: "MindEasy is a full-stack web application that provides AI-powered therapeutic conversations. Built with React (frontend) and Python FastAPI (backend), it offers a clean, intuitive interface for users to interact with an AI therapist powered by multiple AI models with the ability to switch between different models during conversations.",
        tech: ["Python", "TypeScript", "React", "Tailwind", "Flask", "Langchain"],
        github: "https://github.com/vadimtkacj1/mindEasy-llm-chat-bot",
        demo: null,
        hasDemo: false,
    },
    {
        title: "Clustering audio",
        description: "Clustering audio by groups.",
        tech: ["Python", "torch", "librosa", "transformers", "Scikit-learn"],
        github: "https://github.com/vadimtkacj1/clustering-audio",
        demo: null,
        hasDemo: false,
    },
    {
        title: "Named Entity Recognition + Image Classification Pipeline",
        description: "This project focuses on building a machine learning pipeline that combines two different tasks, Named Entity Recognition to extract animal names from text and Image Classification to classify animals in images, with the main goal of taking a user-provided text and an image and determining if the text description of the image is accurate.",
        tech: ["Python", "matplotlib", "opencv-python", "tensorflow", "Scikit-learn", "accelerate", "hydra", "transformers"],
        github: "https://github.com/vadimtkacj1/NER_CNN_PIPELINE",
        demo: null,
        hasDemo: false,
    },
    {
        title: "MNIST Image Classification",
        description: "This project implements three different classification models for the MNIST dataset using Object-Oriented Programming, including a Random Forest, a Feed-Forward Neural Network, and a Convolutional Neural Network. Each model follows a common interface called MnistClassifierInterface, which defines two methods, train for training the model on the provided dataset and predict for generating labels on the test dataset, while a wrapper class named MnistClassifier makes it possible to switch between models through an input parameter.",
        tech: ["Python", "matplotlib", "opencv-python", "tensorflow", "Scikit-learn", "accelerate", "hydra", "transformers"],
        github: "https://github.com/vadimtkacj1/NER_CNN_PIPELINE",
        demo: null,
        hasDemo: false,
    },
        {
        title: "Virtual Paint Application",
        description: "A computer vision-based virtual painting application that allows you to draw in the air using hand gestures detected through your webcam.",
        tech: ["Python", "numpy", "opencv-python", "mediapipe"],
        github: "https://github.com/vadimtkacj1/finger-paint",
        demo: null,
        hasDemo: false,
    },
    {
        title: "Fashion-MNIST CNN Classifier",
        description: "Convolutional Neural Network implementation for classifying Fashion-MNIST dataset images using PyTorch. This project includes comprehensive training analysis, visualization, and performance monitoring capabilities.",
        tech: ["Python", "numpy", "scikit-learn", "torch", "seaborn"],
        github: "https://github.com/vadimtkacj1/fashion-cnn",
        demo: null,
        hasDemo: false,
    },
    {
        title: "Hand Gesture Mouse Control",
        description: "A real-time hand tracking application that allows you to control your computer mouse using hand gestures captured through your webcam. Built with OpenCV, MediaPipe, and AutoPy.",
        tech: ["Python", "numpy", "opencv-python", "autope", "mediapipe"],
        github: "https://github.com/vadimtkacj1/hand-mouse-control",
        demo: null,
        hasDemo: false,
    },
    {
        title: "Face Shape Detection Web Application",
        description: "A modern, AI-powered web application that analyzes facial features to determine face shapes using computer vision and machine learning. Built with Flask, MediaPipe, and OpenCV, featuring a sleek glassmorphism UI design.",
        tech: ["Python", "numpy", "opencv-python", "flask", "mediapipe", "scikit-learn"],
        github: "https://github.com/vadimtkacj1/face-shape-detection",
        demo: null,
        hasDemo: false,
    },
];

export { projectsData };
